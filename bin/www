#!/usr/bin/env node

let app = require('../app');
let debug = require('debug')('file-watcher:server');
let http = require('http');

let server = app;

//设置端口
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//启动服务
if(require.main === module){
    // 应用程序直接运行； 启动应用服务器
    startServer();
} else {
    // 应用程序作为一个模块通过 "require" 引入
    // 导出函数
    module.exports = startServer;
}

/**
 * 启动服务
 */
function startServer(){
    "use strict";
    server = app.server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

}

/**
 * 标准化端口
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/**
 * 错误事件监听
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * 监听事件监听
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
